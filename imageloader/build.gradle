apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.hrj'

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost/" + System.getenv("ANDROID_HOME")
                    + "/extras/android/m2repository/")
            pom.version = '1.0.5-SNAPSHOT'
            pom.groupId = 'com.eaju.imageloader'
            pom.artifactId = 'imageLoaderLibrary'
        }
    }
}

//定义一个函数，target是生成jar包的文件名，classDir是class文件所在的文件夹
def makeJar(String target, String classDir) {
    exec {
        executable "jar"   //调用jar
        args "cvf", target
        args "-C", classDir
        args "", "."
    }
}

//新建一个task,名为buildLib,依赖build(build是一个自带的task)
task buildLib(dependsOn: ['build']) << {
    makeJar("xxx.jar", "build/intermediates/classes/release")
}
android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    buildToolsVersion globalConfiguration.androidBuildToolsVersion
    defaultConfig {
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api dataDependencies.picasso
    api dataDependencies.glide
    api dataDependencies.glideIntegration
    api dataDependencies.fresco
    api dataDependencies.frescoGif
    implementation dataDependencies.gpuImage
}
